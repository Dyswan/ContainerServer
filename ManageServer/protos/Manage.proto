syntax = "proto3";

message ContainerAttr{
     string id = 1;
     string created = 2;
     string status = 3;
     string image = 4;
     string name = 5;
}

message ImageAttr{
     string id = 1;
     repeated string repoTags = 2;
     string created = 3;
     int64 size = 4; //以byte为单位
     string author = 5;
}

message AuthConfig{
     string username = 1;
     string password = 2;
}

message ListContainers_Request{}
message ListContainers_Response{
     repeated ContainerAttr containers = 1;
}

message PruneContainers_Request{}
message PruneContainers_Response{}

message GetContainer_Request{
     string container_id = 1;
}
message GetContainer_Response{
     ContainerAttr container_attr = 1;
}

message StartContainer_Request{
     string container_id = 1;
}
message StartContainer_Response{}

message StopContainer_Request{
     string container_id = 1;
}
message StopContainer_Response{}

message RestartContainer_Request{
     string container_id = 1;
}
message RestartContainer_Response{}

message RemoveContainer_Request{
     string container_id = 1;
     bool force = 2;
}
message RemoveContainer_Response{}

message CreateContainer_Request{
     string image_id = 1;
     string username = 2;
     string container_name = 3;
}
message CreateContainer_Response{
     string container_id = 1;
}

message GetFile_Request{
     string container_id = 1;
     string path = 2;
}
message GetFile_Response{
     bytes data = 1;
}

message UpdateFile_Request{
     //使用文件流时
     // 第一次message不包含data
     // 第一次之后都仅包含data
     string container_id = 1;
     string path = 2;
     string file_name = 3;
     string old_version = 4;
     bool force = 5;
     bytes data = 6;
}
message UpdateFile_Response{
     enum ExitCode {
          SUCCESS = 0;
          MTIME_SYNC_ERROR = 1;
          FILE_IS_NOT_EXIST = 2;
          UNKNOWN_ERROR = 3;
     }
     ExitCode exit_code = 1;
     string new_version = 2;
}

message ListFile_Request{
     string container_id = 1;
     string path = 2;
}
message FileStat{
     enum FileType{
          FILE = 0;
          FOLDER = 1;
          LINK = 2;
     }
     FileType file_type = 1;
     string file_name = 2;
}
message ListFile_Response{
     enum ExitCode {
          SUCCESS = 0;
          MINOR_PROBLEMS = 1;
          SERIOUS_TROUBLE = 2;
     }
     ExitCode exit_code = 1;
     repeated FileStat files = 2;
}

message PruneImages_Request{}
message PruneImages_Response{}

message ListImages_Request{}
message ListImages_Response{
    repeated ImageAttr images = 1; 
}

message PullImage_Request{
     string repository = 1;
     string tag = 2; //tag为空时，默认为latest
     AuthConfig auth_config = 3;
}
message PullImage_Response{}

message BuildImage_Request{
     bytes dockerfile = 1;
}
message BuildImage_Response{}

message LoadImage_Request{
     bytes data = 1;
}
message LoadImage_Response{
     repeated string image_id = 1;
}

message GetImage_Request{
     string image_id = 1;
}
message GetImage_Response{
     ImageAttr image_attr = 1;
}

message RemoveImage_Request{
     string image_id = 1;
     bool force = 2;
}
message RemoveImage_Response{}


service Manager{
//Container utils
     rpc ListContainers(ListContainers_Request) returns (ListContainers_Response) {}
     rpc PruneContainers(PruneContainers_Request) returns (PruneContainers_Response) {}

     rpc GetContainer(GetContainer_Request) returns (GetContainer_Response) {}
     rpc StartContainer(StartContainer_Request) returns (StartContainer_Response) {}
     rpc StopContainer(StopContainer_Request) returns (StopContainer_Response) {}
     rpc RestartContainer(RestartContainer_Request) returns (RestartContainer_Response) {}
     rpc RemoveContainer(RemoveContainer_Request) returns (RemoveContainer_Response) {}
     rpc CreateContainer(CreateContainer_Request) returns (CreateContainer_Response) {}

     //所有的data为tar
     rpc GetFile(GetFile_Request) returns (stream GetFile_Response) {} 
     rpc UpdateFile(UpdateFile_Request) returns (UpdateFile_Response){}
     rpc ListFile(ListFile_Request) returns (ListFile_Response) {}
//Image utils
     rpc PruneImages(PruneImages_Request) returns (PruneImages_Response){}
     rpc ListImages(ListImages_Request) returns (ListImages_Response){}

     rpc PullImage(PullImage_Request) returns (PullImage_Response){}
     rpc BuildImage(BuildImage_Request) returns (BuildImage_Response){}
     rpc LoadImage(stream LoadImage_Request) returns (LoadImage_Response){}
     rpc GetImage(GetImage_Request) returns (GetImage_Response){}
     rpc RemoveImage(RemoveImage_Request) returns (RemoveImage_Response){}
}